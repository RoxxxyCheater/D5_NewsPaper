SECRET_KEY = 'django-insecure-(!u#ll8sgt_#z)c5@wix7t=pinddv34wx02g)1yrzha+_&dmnd'
EMAIL_HOST_PASSWORD = 'nnuzyzfttepwtiln'
DEFAULT_FROM_EMAIL = 'lexinet3g@gmail.com'
EMAIL_HOST_USER = 'lexinet3g'

# С точки зрения сервера, при входе в систему происходит следующее:

#         Неавторизованный пользователь входит на главную страницу сайта.
#         Согласно конфигурации URL его перенаправляет на представление protect.IndexView.
#         В этом представлении стоит миксин проверки аутентификации. Пользователь не авторизован, поэтому Django перенаправляет его на страницу входа. Для этого в файле настроек мы и указывали LOGIN_URL.
#         На странице входа sign/login/ пользователь «отправляется» во встроенное представление LoginView, которое формирует шаблон страницы с формой входа.
#         Пользователь вводит данные (username и пароль), они отправляются с помощью POST-запроса на сервер.
#         Представление LoginView его обрабатывает, сравнивая со строкой в базе данных. Происходит идентификация и аутентификация.
#         При корректных данных для входа пользователь перенаправляется на страницу, указанную в файле настроек LOGIN_REDIRECT_URL. В данном случае это корневая страница сайта.
#         Вновь выполняется п. 2.
#         Только теперь пользователь является авторизованным, и представление выполняется полностью, отображая шаблон protect/index.html.

# При выходе из системы схема работы во многом проще:

#         Кнопка «Выйти» есть только на странице авторизованных пользователей.
#         При её нажатии выполняется представление LogoutView, которое «разлогинит» пользователя и сформирует страницу по шаблону sign/logout.html.
# (env) $ pip install django-allauth

#py NewsPaper/manage.py check --deploy - проверка уязвимости сайта!

#python manage.py collectstatic Если админ-панель потеряла шаблон,проекта. Сейчас довольно тяжело найти подходящий пример для этой команды, но поверьте, когда мы будем касаться развертки нашего приложения на сервер, эта команда нам ещё понадобится.
#python manage.py createsuperuser создать суперпользователя.
#python manage.py changepassword <имя пользователя>  сбросить пароль:
#python manage.py makemigrations [<имя приложения>] — создание миграций (обратите внимание, что имя приложения — параметр необязательный, если его указать, то создаются только миграции для конкретного приложения)
#python manage.py migrate — применить созданные миграции, т.е. внести изменения уже именно в саму базу данных (создать новые или редактировать старые модели).
#python manage.py showmigrations — показать все изменения вносимые в базу данных.
#python manage.py dumpdata --format=json > mydata.json выгрузить все записи из нашей БД в JSON-файл:
#python manage.py dumpdata --format=xml > mydata.xml
#python manage.py loaddata mydata.json удалить данные через админ-панель и снова загрузить их, но уже через команду loaddata
#python manage.py dumpdata --format=xml sample_app > sampledata.xml выгрузить данные из какого-то одного приложения
#python manage.py flush  полная очистка базы данных, т. е. удаление всех данных из таблиц в ней.
# py NewsPaper/manage.py delpostcat AR   Удаление всех постов по категории











